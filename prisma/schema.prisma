generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type GoalMilestone {
  id        String  @default(uuid())
  date      String
  name      String
  notes     String
  completed Boolean
}

type ProfileMentorPreferences {
  cost       Int
  experience Int
}

model Goal {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  dueDate    String
  milestones GoalMilestone[]
  name       String
  notes      String
  /// Multiple data types found: Int: 25%, BigInt: 75% out of 4 sampled entries
  progress   Json
  userId     String
}

model Meeting {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  date     String
  mentorId String
  time     String
}

model Mentor {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  bio                String
  company            String
  cost               Int?
  experience         Int
  img                String?
  name               String
  occupation         String
  tags               String[]
  industry           String
  mentorBio          String?
  achievements       String?
  mentoringGoal      String?
  priorExperience    String?
  twitter            String?
  website            String?
  linkedIn           String?
  github             String?
  profile            Profile?      @relation(fields: [profileId], references: [id], name: "MentorProfile")
  profileId          String?       @unique
  mentorApplications Application[] @relation("MentorApplications")
  menteeIDs          String[]      @db.ObjectId
  mentees            Profile[]     @relation(fields: [menteeIDs], references: [id], name: "MentorConnection")
}

model Profile {
  id                 String                    @id @default(auto()) @map("_id") @db.ObjectId
  bio                String?
  email              String                    @unique
  experience         Int?
  firstName          String
  img                String?
  industry           String?
  lastName           String
  mentorPreferences  ProfileMentorPreferences?
  password           String
  mentorProfile      Mentor?                   @relation( "MentorProfile")
  menteeApplications Application[]             @relation("MenteeApplications")
  verified           Boolean                   @default(false)
  mentorId           String?                   @db.ObjectId
  mentorIDs          String[]                  @db.ObjectId
  mentors            Mentor[]                  @relation(fields: [mentorIDs], references: [id], name: "MentorConnection")
}

model Application {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  desires   String
  goal      String
  progress  String
  deadline  String
  questions String?
  mentee    Profile           @relation("MenteeApplications", fields: [menteeId], references: [id])
  menteeId  String
  mentor    Mentor            @relation("MentorApplications", fields: [mentorId], references: [id])
  mentorId  String
  status    ApplicationStatus @default(UNREAD)
}

enum ApplicationStatus {
  UNREAD
  DENIED
  APPROVED
}
